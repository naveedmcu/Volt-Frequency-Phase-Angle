CCS PCH C Compiler, Version 4.130, 5967               16-Aug-12 02:15

               Filename: E:\Embedded firmware and Electronic +wilcom design\PROGRAMS\Amir SB\Volt Frequance Phase Angle\main.lst

               ROM used: 2148 bytes (7%)
                         Largest free fragment is 30616
               RAM used: 48 (3%) at main() level
                         67 (4%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   0562
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  FF2.5
0056:  GOTO   0060
005A:  BTFSC  FF2.2
005C:  GOTO   00E6
0060:  BTFSS  F9D.0
0062:  GOTO   006C
0066:  BTFSC  F9E.0
0068:  GOTO   010C
006C:  BTFSS  FF2.4
006E:  GOTO   0078
0072:  BTFSC  FF2.1
0074:  GOTO   011E
0078:  BTFSS  FF0.3
007A:  GOTO   0084
007E:  BTFSC  FF0.0
0080:  GOTO   014E
0084:  MOVFF  0E,00
0088:  MOVFF  0F,01
008C:  MOVFF  10,02
0090:  MOVFF  11,03
0094:  MOVFF  0C,FE9
0098:  MOVFF  07,FEA
009C:  BSF    07.7
009E:  MOVFF  08,FE1
00A2:  MOVFF  09,FE2
00A6:  MOVFF  0A,FD9
00AA:  MOVFF  0B,FDA
00AE:  MOVFF  12,FF3
00B2:  MOVFF  13,FF4
00B6:  MOVFF  14,FFA
00BA:  MOVFF  15,FF5
00BE:  MOVFF  16,FF6
00C2:  MOVFF  17,FF7
00C6:  MOVF   04,W
00C8:  MOVFF  06,FE0
00CC:  MOVFF  05,FD8
00D0:  RETFIE 0
.................... #include <main.h> 
.................... #include <18F452.h> 
.................... //////// Standard Header file for the PIC18F452 device //////////////// 
.................... #device PIC18F452 
.................... #list 
....................  
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES WDT128                	//Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HS                    	//High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES PUT                   	//Power Up Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(clock=4000000) 
*
019E:  CLRF   FEA
01A0:  MOVLW  3A
01A2:  MOVWF  FE9
01A4:  MOVF   FEF,W
01A6:  BZ    01C4
01A8:  MOVLW  01
01AA:  MOVWF  01
01AC:  CLRF   00
01AE:  DECFSZ 00,F
01B0:  BRA    01AE
01B2:  DECFSZ 01,F
01B4:  BRA    01AC
01B6:  MOVLW  4A
01B8:  MOVWF  00
01BA:  DECFSZ 00,F
01BC:  BRA    01BA
01BE:  BRA    01C0
01C0:  DECFSZ FEF,F
01C2:  BRA    01A8
01C4:  RETURN 0
....................  
....................  
....................  
.................... int16 counter1, counter2, HZ1,  HZ2, j; 
.................... int16 ADC_VALUE1,ADC_VALUE2; 
.................... int16 V1,V2; 
.................... int16 phase_time; 
....................  
....................  
.................... int1 g_flag; 
.................... int1 start_flag; 
.................... int1 f_s_start; 
....................  
.................... #int_RTCC 
.................... void  RTCC_isr(void)  
.................... { 
....................  SET_TIMER0(3036); 
*
00E6:  MOVLW  0B
00E8:  MOVWF  FD7
00EA:  MOVLW  DC
00EC:  MOVWF  FD6
....................  HZ1 = counter1; 
00EE:  MOVFF  1A,1E
00F2:  MOVFF  19,1D
....................  HZ2 = counter2; 
00F6:  MOVFF  1C,20
00FA:  MOVFF  1B,1F
....................  counter1=0; 
00FE:  CLRF   1A
0100:  CLRF   19
....................  counter2=0; 
0102:  CLRF   1C
0104:  CLRF   1B
.................... } 
....................  
0106:  BCF    FF2.2
0108:  GOTO   0084
.................... #int_timer1 
.................... void time1_isr(void) 
.................... { 
....................  SET_TIMER1(0); 
010C:  CLRF   FCF
010E:  CLRF   FCE
....................  start_flag = 0; 
0110:  BCF    2D.1
....................  f_s_start  = 0; 
0112:  BCF    2D.2
....................  phase_time = 0; 
0114:  CLRF   2C
0116:  CLRF   2B
.................... } 
....................  
0118:  BCF    F9E.0
011A:  GOTO   0084
.................... #int_EXT 
.................... void  EXT_isr(void)  
.................... { 
....................  counter1++; 
011E:  INCF   19,F
0120:  BTFSC  FD8.2
0122:  INCF   1A,F
....................  if (!start_flag) 
0124:  BTFSC  2D.1
0126:  BRA    0132
....................  { 
....................   SET_TIMER1(0); 
0128:  CLRF   FCF
012A:  CLRF   FCE
....................   start_flag = 1; 
012C:  BSF    2D.1
....................   f_s_start = 0; 
012E:  BCF    2D.2
....................  } 
....................  else if(start_flag ) 
0130:  BRA    0148
0132:  BTFSS  2D.1
0134:  BRA    0148
....................  { 
....................   phase_time=get_TIMER1(); 
0136:  MOVF   FCE,W
0138:  MOVWF  2B
013A:  MOVFF  FCF,2C
....................   start_flag = 0; 
013E:  BCF    2D.1
....................   if (!f_s_start) 
0140:  BTFSC  2D.2
0142:  BRA    0148
....................   { 
....................    phase_time = 0; 
0144:  CLRF   2C
0146:  CLRF   2B
....................   } 
....................  } 
.................... } 
....................  
0148:  BCF    FF2.1
014A:  GOTO   0084
.................... #int_EXT1 
.................... void  EXT1_isr(void)  
.................... { 
....................  counter2++; 
014E:  INCF   1B,F
0150:  BTFSC  FD8.2
0152:  INCF   1C,F
....................  if (!start_flag) 
0154:  BTFSC  2D.1
0156:  BRA    0162
....................  { 
....................   SET_TIMER1(0); 
0158:  CLRF   FCF
015A:  CLRF   FCE
....................   start_flag = 1; 
015C:  BSF    2D.1
....................   f_s_start = 1; 
015E:  BSF    2D.2
....................  } 
....................  else if(start_flag) 
0160:  BRA    0178
0162:  BTFSS  2D.1
0164:  BRA    0178
....................  { 
....................   phase_time=get_timer1(); 
0166:  MOVF   FCE,W
0168:  MOVWF  2B
016A:  MOVFF  FCF,2C
....................   start_flag = 0; 
016E:  BCF    2D.1
....................   if (start_flag) 
0170:  BTFSS  2D.1
0172:  BRA    0178
....................   { 
....................    phase_time=0; 
0174:  CLRF   2C
0176:  CLRF   2B
....................   } 
....................  } 
.................... } 
....................  
.................... #define ENABLE_PIN D0 
.................... #define RS_PIN D1 
.................... #define Data4 D4 
.................... #define Data5 D5 
.................... #define Data6 D6 
.................... #define Data7 D7 
....................  
....................  
.................... #define HZ_FAULT_LED    PIN_E0 
.................... #define VOLT_FAULT_LED  PIN_E1 
.................... #define PHASE_FAULT_LED PIN_E2 
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
0178:  BCF    FF0.0
017A:  GOTO   0084
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    BOOLEAN enable;           // on to an I/O port to gain 
....................    BOOLEAN rs;               // access to the LCD pins. 
....................    BOOLEAN rw;               // The bits are allocated from 
....................    BOOLEAN unused;           // low order up.  ENABLE will 
....................    int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... BYTE lcd_read_nibble(void); 
....................  
.................... BYTE lcd_read_byte(void) 
.................... { 
....................    BYTE low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
01EA:  MOVLW  0F
01EC:  ANDWF  F95,W
01EE:  IORLW  F0
01F0:  MOVWF  F95
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
01F2:  BSF    F8C.2
....................    delay_cycles(1); 
01F4:  NOP   
....................    lcd_output_enable(1); 
01F6:  BSF    F8C.0
....................    delay_cycles(1); 
01F8:  NOP   
....................    high = lcd_read_nibble(); 
01FA:  RCALL  01DE
01FC:  MOVFF  01,41
....................        
....................    lcd_output_enable(0); 
0200:  BCF    F8C.0
....................    delay_cycles(1); 
0202:  NOP   
....................    lcd_output_enable(1); 
0204:  BSF    F8C.0
....................    delay_us(1); 
0206:  NOP   
....................    low = lcd_read_nibble(); 
0208:  RCALL  01DE
020A:  MOVFF  01,40
....................        
....................    lcd_output_enable(0); 
020E:  BCF    F8C.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0210:  MOVLW  0F
0212:  ANDWF  F95,W
0214:  MOVWF  F95
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0216:  SWAPF  41,W
0218:  MOVWF  00
021A:  MOVLW  F0
021C:  ANDWF  00,F
021E:  MOVF   00,W
0220:  IORWF  40,W
0222:  MOVWF  01
.................... } 
0224:  GOTO   0232 (RETURN)
....................  
.................... BYTE lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    BYTE n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
01DE:  MOVF   F83,W
01E0:  MOVWF  00
01E2:  SWAPF  00,W
01E4:  ANDLW  0F
01E6:  MOVWF  01
....................   #endif 
.................... } 
01E8:  RETURN 0
....................  
.................... void lcd_send_nibble(BYTE n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
01C6:  SWAPF  41,W
01C8:  ANDLW  F0
01CA:  MOVWF  00
01CC:  MOVLW  0F
01CE:  ANDWF  F8C,W
01D0:  IORWF  00,W
01D2:  MOVWF  F8C
....................   #endif 
....................        
....................    delay_cycles(1); 
01D4:  NOP   
....................    lcd_output_enable(1); 
01D6:  BSF    F8C.0
....................    delay_us(2); 
01D8:  BRA    01DA
....................    lcd_output_enable(0); 
01DA:  BCF    F8C.0
.................... } 
01DC:  RETURN 0
....................  
.................... void lcd_send_byte(BYTE address, BYTE n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0228:  BCF    F95.0
....................    lcd_rs_tris(); 
022A:  BCF    F95.1
....................    lcd_rw_tris(); 
022C:  BCF    F95.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
022E:  BCF    F8C.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
0230:  BRA    01EA
0232:  MOVFF  01,40
0236:  BTFSC  01.7
0238:  BRA    0230
....................    lcd_output_rs(address); 
023A:  BCF    F8C.1
023C:  BTFSC  3E.0
023E:  BSF    F8C.1
....................    delay_cycles(1); 
0240:  NOP   
....................    lcd_output_rw(0); 
0242:  BCF    F8C.2
....................    delay_cycles(1); 
0244:  NOP   
....................    lcd_output_enable(0); 
0246:  BCF    F8C.0
....................    lcd_send_nibble(n >> 4); 
0248:  SWAPF  3F,W
024A:  MOVWF  40
024C:  MOVLW  0F
024E:  ANDWF  40,F
0250:  MOVFF  40,41
0254:  RCALL  01C6
....................    lcd_send_nibble(n & 0xf); 
0256:  MOVF   3F,W
0258:  ANDLW  0F
025A:  MOVWF  40
025C:  MOVWF  41
025E:  RCALL  01C6
.................... } 
0260:  RETURN 0
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    BYTE i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0262:  MOVLW  0F
0264:  ANDWF  F95,W
0266:  MOVWF  F95
....................   #endif 
....................    lcd_enable_tris(); 
0268:  BCF    F95.0
....................    lcd_rs_tris(); 
026A:  BCF    F95.1
....................    lcd_rw_tris(); 
026C:  BCF    F95.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
026E:  BCF    F8C.1
....................    lcd_output_rw(0); 
0270:  BCF    F8C.2
....................    lcd_output_enable(0); 
0272:  BCF    F8C.0
....................      
....................    delay_ms(15); 
0274:  MOVLW  0F
0276:  MOVWF  3A
0278:  RCALL  019E
....................    for(i=1;i<=3;++i) 
027A:  MOVLW  01
027C:  MOVWF  2E
027E:  MOVF   2E,W
0280:  SUBLW  03
0282:  BNC   0294
....................    { 
....................        lcd_send_nibble(3); 
0284:  MOVLW  03
0286:  MOVWF  41
0288:  RCALL  01C6
....................        delay_ms(5); 
028A:  MOVLW  05
028C:  MOVWF  3A
028E:  RCALL  019E
....................    } 
0290:  INCF   2E,F
0292:  BRA    027E
....................     
....................    lcd_send_nibble(2); 
0294:  MOVLW  02
0296:  MOVWF  41
0298:  RCALL  01C6
....................    delay_ms(5); 
029A:  MOVLW  05
029C:  MOVWF  3A
029E:  RCALL  019E
....................    for(i=0;i<=3;++i) 
02A0:  CLRF   2E
02A2:  MOVF   2E,W
02A4:  SUBLW  03
02A6:  BNC   02BA
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
02A8:  CLRF   03
02AA:  MOVF   2E,W
02AC:  RCALL  00D2
02AE:  MOVWF  2F
02B0:  CLRF   3E
02B2:  MOVWF  3F
02B4:  RCALL  0228
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
02B6:  INCF   2E,F
02B8:  BRA    02A2
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
02BA:  GOTO   0610 (RETURN)
....................  
.................... void lcd_gotoxy(BYTE x, BYTE y) 
.................... { 
....................    BYTE address; 
....................     
....................    if(y!=1) 
02BE:  DECFSZ 3B,W
02C0:  BRA    02C4
02C2:  BRA    02CA
....................       address=LCD_LINE_TWO; 
02C4:  MOVLW  40
02C6:  MOVWF  3C
....................    else 
02C8:  BRA    02CC
....................       address=0; 
02CA:  CLRF   3C
....................       
....................    address+=x-1; 
02CC:  MOVLW  01
02CE:  SUBWF  3A,W
02D0:  ADDWF  3C,F
....................    lcd_send_byte(0,0x80|address); 
02D2:  MOVF   3C,W
02D4:  IORLW  80
02D6:  MOVWF  3D
02D8:  CLRF   3E
02DA:  MOVWF  3F
02DC:  RCALL  0228
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
02DE:  RETURN 0
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
02E0:  MOVF   39,W
02E2:  XORLW  07
02E4:  BZ    02F4
02E6:  XORLW  0B
02E8:  BZ    02FE
02EA:  XORLW  06
02EC:  BZ    030E
02EE:  XORLW  02
02F0:  BZ    031A
02F2:  BRA    0324
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
02F4:  MOVLW  01
02F6:  MOVWF  3A
02F8:  MOVWF  3B
02FA:  RCALL  02BE
02FC:  BRA    0330
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
02FE:  CLRF   3E
0300:  MOVLW  01
0302:  MOVWF  3F
0304:  RCALL  0228
....................                      delay_ms(2); 
0306:  MOVLW  02
0308:  MOVWF  3A
030A:  RCALL  019E
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
030C:  BRA    0330
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
030E:  MOVLW  01
0310:  MOVWF  3A
0312:  MOVLW  02
0314:  MOVWF  3B
0316:  RCALL  02BE
0318:  BRA    0330
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
031A:  CLRF   3E
031C:  MOVLW  10
031E:  MOVWF  3F
0320:  RCALL  0228
0322:  BRA    0330
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0324:  MOVLW  01
0326:  MOVWF  3E
0328:  MOVFF  39,3F
032C:  RCALL  0228
032E:  BRA    0330
....................      #endif 
....................    } 
.................... } 
0330:  RETURN 0
....................   
.................... char lcd_getc(BYTE x, BYTE y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
....................  
....................  
.................... void main() 
.................... { 
*
0562:  CLRF   FF8
0564:  BCF    FD0.7
0566:  BSF    07.7
0568:  CLRF   FEA
056A:  CLRF   FE9
056C:  BSF    FC1.0
056E:  BSF    FC1.1
0570:  BSF    FC1.2
0572:  BCF    FC1.3
....................    SETUP_ADC_PORTS(NO_ANALOGS); 
0574:  BSF    FC1.0
0576:  BSF    FC1.1
0578:  BSF    FC1.2
057A:  BCF    FC1.3
....................    setup_adc_ports(AN0_AN1_AN3); 
057C:  BCF    FC1.0
057E:  BCF    FC1.1
0580:  BSF    FC1.2
0582:  BCF    FC1.3
....................    SETUP_ADC(ADC_CLOCK_INTERNAL); 
0584:  BCF    FC1.6
0586:  BSF    FC2.6
0588:  BSF    FC2.7
058A:  BSF    FC1.7
058C:  BSF    FC2.0
....................     
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_16);      //65.5 ms overflow 
058E:  MOVLW  83
0590:  MOVWF  FD5
....................    SET_TIMER0(3036);   
0592:  MOVLW  0B
0594:  MOVWF  FD7
0596:  MOVLW  DC
0598:  MOVWF  FD6
....................  
....................    setup_timer_1(T1_INTERNAL | T1_DIV_BY_1);      //65.5 ms overflow 
059A:  MOVLW  85
059C:  MOVWF  FCD
....................    SET_TIMER1(0); 
059E:  CLRF   FCF
05A0:  CLRF   FCE
....................  
....................    setup_timer_3(T3_DISABLED | T3_DIV_BY_2); 
05A2:  MOVLW  10
05A4:  MOVWF  FB1
....................    SET_TIMER3(15536); 
05A6:  MOVLW  3C
05A8:  MOVWF  FB3
05AA:  MOVLW  B0
05AC:  MOVWF  FB2
....................  
....................  
....................    enable_interrupts(INT_RTCC); 
05AE:  BSF    FF2.5
....................    enable_interrupts(INT_timer1); 
05B0:  BSF    F9D.0
.................... //   enable_interrupts(INT_timer3); 
....................    enable_interrupts(INT_EXT); 
05B2:  BSF    FF2.4
....................    enable_interrupts(INT_EXT1); 
05B4:  BSF    FF0.3
....................    enable_interrupts(GLOBAL); 
05B6:  MOVLW  C0
05B8:  IORWF  FF2,F
....................     
....................    SET_ADC_CHANNEL(0); 
05BA:  MOVLW  00
05BC:  MOVWF  01
05BE:  MOVF   FC2,W
05C0:  ANDLW  C7
05C2:  IORWF  01,W
05C4:  MOVWF  FC2
....................    READ_ADC(ADC_START_AND_READ); 
05C6:  BSF    FC2.2
05C8:  BTFSC  FC2.2
05CA:  BRA    05C8
05CC:  MOVF   FC3,W
....................    SET_ADC_CHANNEL(1); 
05CE:  MOVLW  08
05D0:  MOVWF  01
05D2:  MOVF   FC2,W
05D4:  ANDLW  C7
05D6:  IORWF  01,W
05D8:  MOVWF  FC2
....................    READ_ADC(ADC_START_AND_READ); 
05DA:  BSF    FC2.2
05DC:  BTFSC  FC2.2
05DE:  BRA    05DC
05E0:  MOVF   FC3,W
....................     
....................     
....................    OUTPUT_LOW(VOLT_FAULT_LED); 
05E2:  BCF    F96.1
05E4:  BCF    F8D.1
....................    OUTPUT_LOW(PHASE_FAULT_LED); 
05E6:  BCF    F96.2
05E8:  BCF    F8D.2
....................    OUTPUT_LOW(HZ_FAULT_LED); 
05EA:  BCF    F96.0
05EC:  BCF    F8D.0
....................     
....................     
....................     
....................    ADC_VALUE1 = READ_ADC(ADC_START_AND_READ); 
05EE:  BSF    FC2.2
05F0:  BTFSC  FC2.2
05F2:  BRA    05F0
05F4:  MOVFF  FC3,23
05F8:  MOVFF  FC4,24
....................    ADC_VALUE2 = READ_ADC(ADC_START_AND_READ); 
05FC:  BSF    FC2.2
05FE:  BTFSC  FC2.2
0600:  BRA    05FE
0602:  MOVFF  FC3,25
0606:  MOVFF  FC4,26
....................     
....................    set_tris_d(0); 
060A:  MOVLW  00
060C:  MOVWF  F95
....................    lcd_init(); 
060E:  BRA    0262
....................    lcd_gotoxy(1,1); 
0610:  MOVLW  01
0612:  MOVWF  3A
0614:  MOVWF  3B
0616:  RCALL  02BE
....................    lcd_putc('0'); 
0618:  MOVLW  30
061A:  MOVWF  39
061C:  RCALL  02E0
....................     
....................    /* 
....................    printf(lcd_putc, "\fThis is the 1st line"); 
....................    printf(lcd_putc, "\nNext is the 2nd line"); 
....................    printf(lcd_putc, "\nThis is the 3rd line"); 
....................    printf(lcd_putc, "\nFinally the 4th line");  
....................     
....................    DELAY_ms(100); 
....................     
....................    */ 
....................    SET_ADC_CHANNEL(0); 
061E:  MOVLW  00
0620:  MOVWF  01
0622:  MOVF   FC2,W
0624:  ANDLW  C7
0626:  IORWF  01,W
0628:  MOVWF  FC2
....................    DELAY_ms(100); 
062A:  MOVLW  64
062C:  MOVWF  3A
062E:  RCALL  019E
....................    READ_ADC(ADC_START_AND_READ); 
0630:  BSF    FC2.2
0632:  BTFSC  FC2.2
0634:  BRA    0632
0636:  MOVF   FC3,W
....................  
....................    SET_ADC_CHANNEL(1); 
0638:  MOVLW  08
063A:  MOVWF  01
063C:  MOVF   FC2,W
063E:  ANDLW  C7
0640:  IORWF  01,W
0642:  MOVWF  FC2
....................    DELAY_ms(100);    
0644:  MOVLW  64
0646:  MOVWF  3A
0648:  RCALL  019E
....................    READ_ADC(ADC_START_AND_READ); 
064A:  BSF    FC2.2
064C:  BTFSC  FC2.2
064E:  BRA    064C
0650:  MOVF   FC3,W
....................  
....................  
....................   while(TRUE) 
....................   { 
....................    SET_ADC_CHANNEL(0); 
0652:  MOVLW  00
0654:  MOVWF  01
0656:  MOVF   FC2,W
0658:  ANDLW  C7
065A:  IORWF  01,W
065C:  MOVWF  FC2
....................    DELAY_ms(100); 
065E:  MOVLW  64
0660:  MOVWF  3A
0662:  RCALL  019E
....................    ADC_VALUE1 = READ_ADC(ADC_START_AND_READ); 
0664:  BSF    FC2.2
0666:  BTFSC  FC2.2
0668:  BRA    0666
066A:  MOVFF  FC3,23
066E:  MOVFF  FC4,24
....................     
....................    SET_ADC_CHANNEL(1); 
0672:  MOVLW  08
0674:  MOVWF  01
0676:  MOVF   FC2,W
0678:  ANDLW  C7
067A:  IORWF  01,W
067C:  MOVWF  FC2
....................    DELAY_ms(100); 
067E:  MOVLW  64
0680:  MOVWF  3A
0682:  RCALL  019E
....................    ADC_VALUE2 = READ_ADC(ADC_START_AND_READ); 
0684:  BSF    FC2.2
0686:  BTFSC  FC2.2
0688:  BRA    0686
068A:  MOVFF  FC3,25
068E:  MOVFF  FC4,26
....................   
....................    V1 = ADC_VALUE1*0.3051; 
0692:  MOVFF  24,2F
0696:  MOVFF  23,2E
069A:  RCALL  0332
069C:  MOVFF  03,31
06A0:  MOVFF  02,30
06A4:  MOVFF  01,2F
06A8:  MOVFF  00,2E
06AC:  MOVLW  11
06AE:  MOVWF  35
06B0:  MOVLW  36
06B2:  MOVWF  34
06B4:  MOVLW  1C
06B6:  MOVWF  33
06B8:  MOVLW  7D
06BA:  MOVWF  32
06BC:  RCALL  0368
06BE:  MOVFF  03,31
06C2:  MOVFF  02,30
06C6:  MOVFF  01,2F
06CA:  MOVFF  00,2E
06CE:  RCALL  045A
06D0:  MOVFF  02,28
06D4:  MOVFF  01,27
....................    V2 = ADC_VALUE2*0.3051; 
06D8:  MOVFF  26,2F
06DC:  MOVFF  25,2E
06E0:  RCALL  0332
06E2:  MOVFF  03,31
06E6:  MOVFF  02,30
06EA:  MOVFF  01,2F
06EE:  MOVFF  00,2E
06F2:  MOVLW  11
06F4:  MOVWF  35
06F6:  MOVLW  36
06F8:  MOVWF  34
06FA:  MOVLW  1C
06FC:  MOVWF  33
06FE:  MOVLW  7D
0700:  MOVWF  32
0702:  RCALL  0368
0704:  MOVFF  03,31
0708:  MOVFF  02,30
070C:  MOVFF  01,2F
0710:  MOVFF  00,2E
0714:  RCALL  045A
0716:  MOVFF  02,2A
071A:  MOVFF  01,29
....................  
....................    lcd_gotoxy(1,1); 
071E:  MOVLW  01
0720:  MOVWF  3A
0722:  MOVWF  3B
0724:  RCALL  02BE
....................    printf(lcd_putc,"V1:%4LU",(int16) V1); 
0726:  MOVLW  56
0728:  MOVWF  39
072A:  RCALL  02E0
072C:  MOVLW  31
072E:  MOVWF  39
0730:  RCALL  02E0
0732:  MOVLW  3A
0734:  MOVWF  39
0736:  RCALL  02E0
0738:  MOVLW  01
073A:  MOVWF  FE9
073C:  MOVFF  28,31
0740:  MOVFF  27,30
0744:  RCALL  0492
....................    lcd_gotoxy(9,1); 
0746:  MOVLW  09
0748:  MOVWF  3A
074A:  MOVLW  01
074C:  MOVWF  3B
074E:  RCALL  02BE
....................    printf(lcd_putc,"|V2:%4LU",(int16) V2); 
0750:  MOVLW  7E
0752:  MOVWF  FF6
0754:  MOVLW  01
0756:  MOVWF  FF7
0758:  MOVLW  04
075A:  MOVWF  30
075C:  RCALL  0544
075E:  MOVLW  01
0760:  MOVWF  FE9
0762:  MOVFF  2A,31
0766:  MOVFF  29,30
076A:  RCALL  0492
....................     
....................    lcd_gotoxy(1,2); 
076C:  MOVLW  01
076E:  MOVWF  3A
0770:  MOVLW  02
0772:  MOVWF  3B
0774:  RCALL  02BE
....................    printf(lcd_putc,"F1:%2LU",HZ1); 
0776:  MOVLW  46
0778:  MOVWF  39
077A:  RCALL  02E0
077C:  MOVLW  31
077E:  MOVWF  39
0780:  RCALL  02E0
0782:  MOVLW  3A
0784:  MOVWF  39
0786:  RCALL  02E0
0788:  MOVLW  03
078A:  MOVWF  FE9
078C:  MOVFF  1E,31
0790:  MOVFF  1D,30
0794:  RCALL  0492
....................    lcd_gotoxy(9,2); 
0796:  MOVLW  09
0798:  MOVWF  3A
079A:  MOVLW  02
079C:  MOVWF  3B
079E:  RCALL  02BE
....................    printf(lcd_putc,"|F2:%2LU",HZ2); 
07A0:  MOVLW  88
07A2:  MOVWF  FF6
07A4:  MOVLW  01
07A6:  MOVWF  FF7
07A8:  MOVLW  04
07AA:  MOVWF  30
07AC:  RCALL  0544
07AE:  MOVLW  03
07B0:  MOVWF  FE9
07B2:  MOVFF  20,31
07B6:  MOVFF  1F,30
07BA:  RCALL  0492
....................    
....................    lcd_gotoxy(17,1); 
07BC:  MOVLW  11
07BE:  MOVWF  3A
07C0:  MOVLW  01
07C2:  MOVWF  3B
07C4:  RCALL  02BE
....................    printf(lcd_putc,"PHASE:%4lU",(int16)(phase_time*.018)); 
07C6:  MOVFF  2C,2F
07CA:  MOVFF  2B,2E
07CE:  RCALL  0332
07D0:  MOVFF  03,31
07D4:  MOVFF  02,30
07D8:  MOVFF  01,2F
07DC:  MOVFF  00,2E
07E0:  MOVLW  BC
07E2:  MOVWF  35
07E4:  MOVLW  74
07E6:  MOVWF  34
07E8:  MOVLW  13
07EA:  MOVWF  33
07EC:  MOVLW  79
07EE:  MOVWF  32
07F0:  RCALL  0368
07F2:  MOVFF  03,31
07F6:  MOVFF  02,30
07FA:  MOVFF  01,2F
07FE:  MOVFF  00,2E
0802:  RCALL  045A
0804:  MOVFF  02,2F
0808:  MOVFF  01,2E
080C:  MOVLW  92
080E:  MOVWF  FF6
0810:  MOVLW  01
0812:  MOVWF  FF7
0814:  MOVLW  06
0816:  MOVWF  30
0818:  RCALL  0544
081A:  MOVLW  01
081C:  MOVWF  FE9
081E:  MOVFF  2F,31
0822:  MOVFF  2E,30
0826:  RCALL  0492
....................    
....................    if ((HZ1 - HZ2) !=0) 
0828:  MOVF   1F,W
082A:  SUBWF  1D,W
082C:  MOVWF  2E
082E:  MOVF   20,W
0830:  SUBWFB 1E,W
0832:  MOVWF  2F
0834:  MOVF   2E,F
0836:  BNZ   083C
0838:  MOVF   2F,F
083A:  BZ    0842
....................    { 
....................     OUTPUT_HIGH(HZ_FAULT_LED); 
083C:  BCF    F96.0
083E:  BSF    F8D.0
....................    } 
....................    else  
0840:  BRA    0846
....................    { 
....................     OUTPUT_LOW(HZ_FAULT_LED); 
0842:  BCF    F96.0
0844:  BCF    F8D.0
....................    } 
....................    if ((V1 - V2) !=0) 
0846:  MOVF   29,W
0848:  SUBWF  27,W
084A:  MOVWF  2E
084C:  MOVF   2A,W
084E:  SUBWFB 28,W
0850:  MOVWF  2F
0852:  MOVF   2E,F
0854:  BNZ   085A
0856:  MOVF   2F,F
0858:  BZ    0860
....................    { 
....................     OUTPUT_HIGH(VOLT_FAULT_LED); 
085A:  BCF    F96.1
085C:  BSF    F8D.1
....................    } 
....................    else  
085E:  BRA    0864
....................    { 
....................     OUTPUT_LOW(VOLT_FAULT_LED); 
0860:  BCF    F96.1
0862:  BCF    F8D.1
....................    }    
....................   } 
0864:  BRA    0652
.................... } 
....................  
0866:  SLEEP 

Configuration Fuses:
   Word  1: 2200   HS NOOSCSEN
   Word  2: 0E0C   PUT NOBROWNOUT BORV20 NOWDT WDT128
   Word  3: 0100   CCP2C1
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
